#!/usr/bin/env php
<?php

/* This file is part of file-browser.
 *
 * Copyright (C)
 *  2018 Alexander Haase <ahaase@alexhaase.de>
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * NOTE: This file includes autogenerated code from Symfony, also licensed under
 *       the MIT license.
 */

use App\Kernel;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Dotenv\Dotenv;

/* Set the maximum execution time to infinity, as console commands may run for a
 * longer period of time (e.g. processing lots of data).
 *
 * NOTE: The time limit should be increased before processing any other files,
 *       as these could already exceed the time limit. */
set_time_limit(0);

require __DIR__.'/../vendor/autoload.php';

/* Check if the application's environment is set. If it's not, this indicates
 * that either the webserver is not configured properly or the dotenv package is
 * missing. */
if (!isset($_SERVER['APP_ENV'])) {
    if (!class_exists(Dotenv::class)) {
        throw new RuntimeException(
            'APP_ENV environment variable is not defined. You need to define '.
            'environment variables for configuration or add "symfony/dotenv" '.
            'as a Composer dependency to load variables from a .env file.'
        );
    }
    $dotenv = new Dotenv();
    $dotenv->load(__DIR__.'/../.env');
}

/* Check the command line arguments for global parameters. The user may override
 * the application's environment and debug mode from the environment variables
 * via console arguments. */
$input = new ArgvInput();
$env = $input->getParameterOption(
    ['--env', '-e'],
    $_SERVER['APP_ENV'] ?? 'dev'
);
$debug = ($_SERVER['APP_DEBUG'] ?? ('prod' !== $env))
         && !$input->hasParameterOption(['--no-debug', '']);

/* If the debug mode is enabled and the debug component of Symfony is available,
 * it will be enabled.
 *
 * NOTE: Checking the existance of the debug class is required, as the console
 *       might a different environment than 'prod', which enabled the debug mode
 *       automatically, so a non-existing class (as the application is in
 *       production) could be loaded. */
if ($debug && class_exists(Debug::class)) {
    Debug::enable();
}

/* Create a new kernel, initialize the application with this kernel and run the
 * application (in console mode). */
$kernel = new Kernel($env, $debug);
$application = new Application($kernel);
$application->run($input);
